import { FastifyInstance } from 'fastify'
import { z } from 'zod'
import { v4 as uuid } from 'uuid'
import { query } from '../db.js'
import crypto from 'crypto'
import { env } from '../env.js'
function nicknameValid(n:string){return/^[a-z0-9_-]{3,16}$/i.test(n)}
function hmac(d:string){return crypto.createHmac('sha256',env.SERVER_SALT).update(d).digest('hex')}
export async function runRoutes(f:FastifyInstance){
  f.post('/api/run/start',async(req,reply)=>{const body=z.object({device_id:z.string(),nickname:z.string()}).parse(req.body||{});const nickname=body.nickname.trim();if(!nicknameValid(nickname))return reply.code(400).send({error:'invalid_nickname'});const low=nickname.toLowerCase();if(env.RESERVED_NICKS.includes(low)){const res=await query('select device_id from nick_reservations where nickname=$1',[low]);if(res.rowCount&&res.rows[0].device_id!==body.device_id)return reply.code(409).send({error:'reserved'});if(!res.rowCount)await query('insert into nick_reservations(nickname, device_id) values ($1,$2)',[low,body.device_id])}
  await query('insert into users(device_id, nickname) values ($1,$2) on conflict (device_id) do update set nickname = excluded.nickname',[body.device_id,nickname]);const season=Math.floor(Date.now()/(env.SEASON_LENGTH_DAYS*24*3600*1000));const run_id=uuid();const seed=Math.floor(Math.random()*2**31);const nonce=hmac(run_id+':'+seed);await query('insert into run_meta(run_id, device_id, seed, nonce, season) values ($1,$2,$3,$4,$5)',[run_id,body.device_id,seed,nonce,season]);return{run_id,seed,season,nonce}})
  f.post('/api/run/finish',async(req,reply)=>{const body=z.object({run_id:z.string(),score:z.number(),wave:z.number(),duration_ms:z.number(),build_hash:z.string().optional(),proof:z.string()}).parse(req.body||{});const meta=await query('select * from run_meta where run_id=$1',[body.run_id]);if(meta.rowCount===0)return reply.code(400).send({error:'unknown_run'});const m=meta.rows[0];const expected=crypto.createHmac('sha256',env.SERVER_SALT).update(`${m.nonce}:${body.score}:${body.wave}:${body.duration_ms}`).digest('hex');if(expected!==body.proof)return reply.code(400).send({error:'bad_proof'});const user=await query('select id from users where device_id=$1',[m.device_id]);if(user.rowCount===0)return reply.code(400).send({error:'unknown_user'});if(body.duration_ms<30000||body.duration_ms>900000)return reply.code(400).send({error:'duration_out_of_range'});if(body.wave<0||body.wave>200)return reply.code(400).send({error:'wave_out_of_range'});if(body.score<0||body.score>10000000)return reply.code(400).send({error:'score_out_of_range'});await query('insert into runs(id, user_id, score, wave, duration_ms, season, build_hash) values ($1,$2,$3,$4,$5,$6,$7)',[body.run_id,user.rows[0].id,body.score,body.wave,body.duration_ms,m.season,body.build_hash||null]);await query('delete from run_meta where run_id=$1',[body.run_id]);return{ok:true}})
}
